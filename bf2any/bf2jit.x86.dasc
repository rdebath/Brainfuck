#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#ifndef _WIN32
#include <sys/mman.h>
#else
# include <windows.h>
#endif

/* LLONG_MAX came in after inttypes.h, limits.h is very old. */
#include <limits.h>
#if _POSIX_VERSION >= 199506L || defined(LLONG_MAX)
#include <inttypes.h>
#endif

#include "bf2any.h"

/*
 * dasm64 translation from BF, runs at about 5,000,000,000 instructions per second.
 */

static gen_code_t gen_code;
struct be_interface_s be_interface = {.gen_code=gen_code, .cells_are_ints=1 };

#if defined(__x86_64__) || defined(__amd64__) || defined(_M_AMD64)
#define CPUCHECK 64
#define DASM_FOUND_CPU_X86_64
#elif defined(__i386__) || defined(_M_IX86)
#define CPUCHECK 32
#define DASM_FOUND_CPU_X86_32
#else
#warning "Supported processor not detected."
#endif

#ifndef DETECT_ONLY
#if !CPUCHECK
void outcmd(int ch, int count, char * strn) {
    fprintf(stderr, "Build failed: Supported processor not detected.\n");
    exit(255);
}
#else

#define DASM_FDEF static
#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_x86.h"

/*  The rest of the file is processed by DynASM then C.
 *
 *  The Makefile takes care of making sure that the I386 flag matches
 *  the processor that the compiler detects by first preprocessing this
 *  code with 'DETECT_ONLY' enabled.
 */
/*
 *  The "actionlist" command defines the name of the data blob that
 *  the first pass of the assembler will use to pass it's data to the
 *  runtime pass.
 *
 *  The "globals" command defines the prefix used for the data structure
 *  to store 'global label' numbers
 *
 *  You can have multiple code sections, eg: for library routines. But in
 *  general you probably won't need to as you can probably run over your
 *  parse tree in the 'right' order.
 *
 *  Note, it is possibly to use #if commands to break up pieces of
 *  code, but the assembler (pass1) will see ALL the lines of assembly
 *  irrespective of these directives; therefor all '.define' commands
 *  within a '#ifdef' will be active.
 *
 */

|.if I386
||#define CPUID "i686"
||enum { okay=1/(CPUCHECK==32) };
|.arch x86
|.else
||#define CPUID "x86_64"
||enum { okay=1/(CPUCHECK==64) };
|.arch x64
|.endif

|.actionlist actions
|.section code
|.globals GLOB_

/*  Using 32 bit working registers for both 32 and 64 bit. The REG_P register
 *  is 64 bit on x64 so that the memory can be malloc'd beyond the 2GB limit.
 *
 *  Function pointers for getchar and putchar are used assuming that the
 *  program has been compiled with -mcmodel=large so that it won't break.
 */

|.if I386
|.define REG_P, esi
|.define REG_A, eax
|.define REG_AL, al
|.define REG_B, ebx
|.define REG_BL, bl
|.define REG_C, ecx
|.else
|.define REG_P, r15
|.define REG_A, eax
|.define REG_AL, al
|.define REG_B, ebx
|.define REG_BL, bl
|.define REG_C, ecx
/* Windows, of course, uses different registers for the parameters.
 * This time it may not even be Microsoft's fault!?!? */
|.define PRM, rdi
|.endif

/* The state of the assembler at run time. Note that the 'Dst' name is
 * hardcoded into the lua generation script. If you want to have multiple
 * states available you must redefine this identifier. It is not safe
 * to put any _code_generating_ assembly before this point. */
#define Dst &Dstate
static dasm_State *Dstate;

/* These are the named global labels prefixed in the assembler by the "->"
 * sequence. The "GLOB_" prefix is from the .globals identifier above.
 * Each label can only appear once in the generated machine code.
 */
static void* global_labels[GLOB__MAX];

/* A stack for a pair of labels for each open while loop. */
static struct stkdat { struct stkdat * up; int id; } *sp = 0;
/* This is the highest allocated dynamically generated label number */
static int maxpc = 0;

static void link_and_run(dasm_State **state);
static size_t tape_step = sizeof(int);
typedef int (*fnptr)(char * memory);
static char * tapemem;

static int acc_loaded = 0;
static int acc_offset = 0;
static int acc_dirty = 0;
static int acc_hi_dirty = 0;
static int imov = 0;

/* Make sure REG_A has been written out to the tape */
static void
clean_acc(void)
{
    if (acc_loaded && acc_dirty) {
	if (tape_step > 1) {
	    if (acc_offset) {
		| mov [REG_P+acc_offset * tape_step], REG_A
	    } else {
		| mov [REG_P], REG_A
	    }
	} else {
	    if (acc_offset) {
		| mov byte [REG_P+acc_offset], REG_AL
	    } else {
		| mov byte [REG_P], REG_AL
	    }
	}

	acc_dirty = 0;
    }
}

/* Set REG_A to contain the contents of tape cell "offset" but DO NOT read the
 * current value from the tape.
 * Save anything that was in REG_A before if needed.
 */
static void
set_acc_offset(int offset)
{
    if (acc_loaded && acc_dirty && acc_offset != offset)
	clean_acc();

    acc_offset = offset;
    acc_loaded = 1;
    acc_dirty = 1;
    acc_hi_dirty = 1;
}

/* Load the tape cell "offset" into REG_A, save anything that was in
 * REG_A before if needed.
 */
static void
load_acc_offset(int offset)
{
    if (acc_loaded) {
	if (acc_offset == offset) return;
	if (acc_dirty)
	    clean_acc();
    }

    acc_offset = offset;
    if (tape_step > 1) {
	if (acc_offset) {
	    | mov REG_A, [REG_P+acc_offset*tape_step]
	} else {
	    | mov REG_A, [REG_P]
	}
    } else {
	if (acc_offset) {
	    | movzx REG_A, byte [REG_P+acc_offset]
	} else {
	    | movzx REG_A, byte [REG_P]
	}
    }

    acc_loaded = 1;
    acc_dirty = 0;
    acc_hi_dirty = 0; /* (tape_step*8 != cell_size); */
}

static void
move_tape(void)
{
    if (acc_loaded) acc_offset -= imov;
    if (imov>0) {
	| add REG_P, imov*tape_step
    }
    if (imov<0) {
	| sub REG_P, -imov*tape_step
    }
    imov = 0;
}

static void failout(void) { fprintf(stderr, "STOP Command executed.\n"); exit(1); }

/* Called from the front end as normal */
static void
gen_code(int ch, int count, char * strn)
{
    switch(ch) {
    case '!':
	/*  dasm_init sets up the Dst data structure, the second argument is
	 *  the number of code sections used by the ".section" command, I
	 *  only need one. */
	dasm_init(Dst, 1);

	/*  This is some boilerplate for the "->" global names, after
	 *  the function dasm_encode is called the 'global_labels'
	 *  array will have pointers to these labels. For example the
	 *  start label below is in global_labels[GLOB_start]
	 */
	dasm_setupglobal(Dst, global_labels, GLOB__MAX);

	/* Link up the C library to the generated blob of assembled data */
	dasm_setup(Dst, actions);

	if (bytecell) tape_step = 1; else tape_step = sizeof(int);

	/* Create Stack frame. */
	| ->start:
	|.if I386
	| push ebp
	| push edi
	| push esi
	| push ebx
	| mov  ebp, esp
	|
	| mov  REG_P, dword [ebp+20]
	|.else
	| push rbp
	| push r15
	| push r14
	| push r13
	| push rbx
	|
	| mov  rbp, rsp
	| sub  rsp, 64 // Some shadow space for Windows.
	|
#ifndef _WIN32
	| mov  REG_P, PRM
#else
	| mov  REG_P, rcx
#endif
	|.endif
	break;

    case '>': imov += count; break;
    case '<': imov -= count; break;

    case '=':
	set_acc_offset(imov);
	if (count == 0) {
	    | xor REG_A, REG_A
	} else {
	    | mov REG_A, count
	}
	break;

    case 'B':
	load_acc_offset(imov);
	if (bytecell && acc_hi_dirty) {
	    | and REG_A, 255
	    acc_hi_dirty = 0;
	}
	| mov REG_B,REG_A
	break;

    case 'M':
	load_acc_offset(imov);
	set_acc_offset(imov);
	| imul REG_C,REG_B,count
	| add REG_A,REG_C
	break;

    case 'N':
	load_acc_offset(imov);
	set_acc_offset(imov);
	| imul REG_C,REG_B,count
	| sub REG_A,REG_C
	break;

    case 'S':
	load_acc_offset(imov);
	set_acc_offset(imov);
	| add REG_A,REG_B
	break;

    case 'T':
	load_acc_offset(imov);
	set_acc_offset(imov);
	| sub REG_A,REG_B
	break;

    case '*':
	load_acc_offset(imov);
	set_acc_offset(imov);
	| imul REG_A,REG_B
	break;

    case 'C':
	set_acc_offset(imov);
	| imul REG_A,REG_B,count
	break;

    case 'D':
	set_acc_offset(imov);
	| imul REG_A,REG_B,-count
	break;

    case 'V':
	set_acc_offset(imov);
	| mov REG_A,REG_B
	break;

    case 'W':
	set_acc_offset(imov);
	| mov REG_A,REG_B
	| neg REG_A
	break;

    case '+':
	load_acc_offset(imov);
	set_acc_offset(imov);
	| add REG_A, count
	break;

    case '-':
	load_acc_offset(imov);
	set_acc_offset(imov);
	| sub REG_A, count
	break;

    case 'X':
	|.if I386
	| call &failout
	|.else
#if (defined(__code_model_small__) && !defined(__PIC__)) || defined(__ILP32__)
	| mov   eax, (uintptr_t) failout
#else
	| mov64 rax, (uintptr_t) failout
#endif
	| call  rax
	|.endif
	break;

    case '[':
	{
	    struct stkdat * n = malloc(sizeof*n);
	    n->up = sp;
	    sp = n;

	    maxpc += 2;
	    n->id = maxpc;

	    dasm_growpc(Dst, maxpc);

	    clean_acc();
	    move_tape();
	    load_acc_offset(0);
	    clean_acc();
	    if (bytecell) {
		| cmp   REG_AL, 0
	    } else {
		| cmp   REG_A, 0
	    }
	    | jz   =>(maxpc-2)
	    | =>(maxpc-1):

	    /* The "=>" style labels are the most useful form, they give you
	     * an indefinite set of normal labels for use as jump targets.
	     * You MUST allocate space for a label with "dasm_growpc" before
	     * you process the assembler that references it.
	     */
	}
	break;

    case ']':
	{
	    struct stkdat * n = sp;
	    int setpc;
	    sp = n->up;
	    setpc = n->id;
	    free(n);

	    clean_acc();
	    move_tape();
	    load_acc_offset(0);
	    clean_acc();
	    if (bytecell) {
		| cmp   REG_AL, 0
	    } else {
		| cmp   REG_A, 0
	    }
	    | jne   =>(setpc-1)
	    | =>(setpc-2):
	}
	break;

    case 'I':
	{
	    struct stkdat * n = malloc(sizeof*n);
	    n->up = sp;
	    sp = n;

	    maxpc += 1;
	    n->id = maxpc;

	    dasm_growpc(Dst, maxpc);

	    clean_acc();
	    move_tape();
	    load_acc_offset(0);
	    clean_acc();
	    if (bytecell) {
		| cmp   REG_AL, 0
	    } else {
		| cmp   REG_A, 0
	    }
	    | jz   =>(maxpc-1)

	    /* The "=>" style labels are the most useful form, they give you
	     * an indefinite set of normal labels for use as jump targets.
	     * You MUST allocate space for a label with "dasm_growpc" before
	     * you process the assembler that references it.
	     */
	}
	break;

    case 'E':
	{
	    struct stkdat * n = sp;
	    int setpc;
	    sp = n->up;
	    setpc = n->id;
	    free(n);

	    clean_acc();
	    move_tape();
	    acc_loaded = 0;
	    | =>(setpc-1):
	}
	break;

    case ',':
	/* Note: REG_A must be eax/rax */
	clean_acc();
	set_acc_offset(imov);
	|.if I386
	| call &getchar
	|.else
#if (defined(__code_model_small__) && !defined(__PIC__)) || defined(__ILP32__)
	| mov	eax, (uintptr_t) getchar
	| call  rax
#else
	| mov64 rax, (uintptr_t) getchar
	| call  rax
#endif
	|.endif
	| cmp   REG_A, -1
	| jz >1
	clean_acc();
	acc_loaded = 0;
	| 1:

	/* The ">1" and "1:" are local labels where you can jump forward or
	 * backward to (only) the next label with that number.
	 *
	 * Unfortunatly there are only ten of these so I could not use them
	 * for the main while() loop processing as I've done in the bf2gas
	 * generator.
	 */
	break;

    case '.':
	clean_acc();
	move_tape();
	acc_loaded = 0;

	|.if I386
	| movzx eax, byte [REG_P]
	| push eax
	| call &putchar
	| pop eax
	|.else
#ifndef _WIN32
	| movzx PRM, byte [REG_P]
#else
	| movzx rcx, byte [REG_P]
#endif
#if (defined(__code_model_small__) && !defined(__PIC__)) || defined(__ILP32__)
	| mov	eax, (uintptr_t) putchar
	| call  rax
#else
	| mov64 rax, (uintptr_t) putchar
	| call  rax
#endif
	|.endif
	break;

    case '"':
	{
	    char * str = strn;
	    if (!str) break;
	    clean_acc();
	    move_tape();
	    acc_loaded = 0;

	    for(; *str; str++) {

		|.if I386
		| mov eax, *str
		| push eax
		| call &putchar
		| pop eax
		|.else
#ifndef _WIN32
		| mov PRM, *str
#else
		| mov rcx, *str
#endif
#if (defined(__code_model_small__) && !defined(__PIC__)) || defined(__ILP32__)
		| mov	eax, (uintptr_t) putchar
		| call  rax
#else
		| mov64 rax, (uintptr_t) putchar
		| call  rax
#endif
		|.endif
	    }
	}
	break;

    case '~':
	clean_acc();
	|.if I386
	| xor eax, eax
	| mov esp, ebp
	| pop ebx
	| pop esi
	| pop edi
	| pop ebp
	|.else
	| xor rax, rax
	| mov rsp, rbp
	| pop rbx
	| pop r13
	| pop r14
	| pop r15
	| pop rbp
	|.endif
	| ret

	link_and_run(Dst);
	break;

    default:
	fprintf(stderr, "Unimplemented backend command 0x%02x\n", ch);
	exit(1);
    }
}

#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#endif
#if defined(__minix__)
#define NO_MPROTECT
#endif
#if !defined(MAP_FAILED)
#define MAP_FAILED (-1)
#endif

static void
link_and_run(dasm_State ** state)
{
    /* dasm_link is the second pass of the assembler, the first phase of the
     * first pass is the lua code which converts the assembler into code
     * fragments in the C file generated from the 'dasc' file. The second
     * phase happens at run time and orders and duplicates these fragments
     * when 'outcmd' is called.
     *
     * This pass resolves all the labels relative to the segments and joins
     * the segments together onto one unit of code. The size of this code
     * is returned in the 'size' argument.
     */
    fnptr  code = 0;
    char   *codeptr;
    size_t codelen;
    int     dasm_status = dasm_link(state, &codelen);
    if (dasm_status != DASM_S_OK) {
	fprintf(stderr, "Process dasm_link() failed\n");
	exit(1);
    }

    (void)dasm_getpclabel;	/* Unused */

#ifndef _WIN32
#ifdef MAP_ANONYMOUS
    /* I allocate this with a 'PROT_EXEC' flag set so the kernel can choose
     * to put it in the 'code area' if there is such a thing (i386) */
    codeptr =
	(char *) mmap(NULL, codelen,
#ifdef NO_MPROTECT
                      PROT_WRITE |
#endif
		      PROT_READ | PROT_EXEC,
		      MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
#else
    /* This'll probably only work with Linux ... Oh, FreeBSD too. */
    {
	int fd = open("/dev/zero", O_RDWR);
	if (fd >= 0) {
	    codeptr =
		(char *) mmap(NULL, codelen,
#ifdef NO_MPROTECT
			      PROT_WRITE |
#endif
			      PROT_READ | PROT_EXEC, MAP_PRIVATE, fd, 0);
	    close(fd);
	} else
	    codeptr = MAP_FAILED;
    }
#endif
    if (codeptr == MAP_FAILED) {
	perror("Unable to allocate memory for executable");
	exit(1);
    }

#ifndef NO_MPROTECT
    if (mprotect(codeptr, codelen, PROT_WRITE | PROT_READ) != 0) {
	perror("mprotect to enable code writing");
    };
#endif
#else /*_WIN32*/
    codeptr = (char*) VirtualAlloc(0, codelen, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (!codeptr) {
	perror("Unable to allocate executable memory");
	exit(1);
    }
#endif

    /* Last phase: Stream out the code fragments into proper machine
     * code doing the final absolute relocations.
     *
     * Also after this phase completes the globals array and
     * dasm_getpclabel can be used to find the addresses for
     * '->' and '=>' style labels respectivly.
     */
    dasm_encode(state, codeptr);

    /* This frees up all state for the assembler, everything must go. */
    /* In particular 'dasm_getpclabel()' can no longer be called */
    dasm_free(state);

    /* Make it read only before we run it; also means that a context switch
     * happens so there won't be any 'bad cache' effects */
#ifndef __WIN32
#ifndef NO_MPROTECT
    if (mprotect(codeptr, codelen, PROT_EXEC | PROT_READ) != 0) {
	perror("mprotect read only");
    };
#endif
#else
    DWORD oldProt = 0;
    if (!VirtualProtect(codeptr, codelen, PAGE_EXECUTE_READ, &oldProt)) {
	perror("VirtualProtect read only failed");
    }
#endif

#if 0
    /* Write generated machine code to a temporary file.
     * View with:
     *  objdump -D -b binary -mi386 -Mx86,intel code.bin
     * or
     *  ndisasm -b32 code.bin
     */
    FILE   *f = fopen("/tmp/code.bin", "w");
    fwrite(codeptr, codelen, 1, f);
    fclose(f);
    fprintf(stderr, "codeptr = 0x%lx\n", (unsigned long) codeptr);
    fprintf(stderr, "codelen = 0x%lx\n", (unsigned long) codelen);
    fprintf(stderr, "putchar = 0x%lx\n", (unsigned long) &putchar);
    fprintf(stderr, "getchar = 0x%lx\n", (unsigned long) &getchar);
#endif

    /* Remove the stdout output buffer */
    if (isatty(STDOUT_FILENO)) setbuf(stdout, 0);

    /* Memory for the tape. */
    tapemem = calloc(tapesz, tape_step);

    /* The C99 standard leaves casting from "void *" to a function
       pointer undefined.  The assignment used below is the POSIX.1-2003
       (Technical Corrigendum 1) workaround; see the Rationale for the
       POSIX specification of dlsym(). */
					     /* -- Linux man page dlsym() */
    *(void **) (&code) = (void *) codeptr;
    code(tapemem + tape_step * tapeinit);

    /* Discard code and data */
#ifndef _WIN32
    if (munmap(codeptr, codelen) != 0)
	perror("munmap(codeptr, codelen)");
#else
    (void)VirtualFree(codeptr, 0, MEM_RELEASE);
#endif
    free(tapemem);
}

#endif
#endif
